{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","completeTodo","deleteTodo","useState","completeBtnText","changeText","className","style","isComplete","textDecoration","background","text","onClick","handleComplete","color","TodoForm","addTodo","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","App","todos","setTodos","newTodo","map","i","newTodos","splice","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAGA,SAASA,EAAT,GAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WAAc,EACjBC,mBAAS,YADQ,mBAChDC,EADgD,KAC/BC,EAD+B,KAYvD,OACE,yBACEC,UAAU,OACVC,MACER,EAAKS,WACD,CAAEC,eAAgB,eAAgBC,WAAY,QAC9C,CAAED,eAAgB,OAAQC,WAAY,SAG3CX,EAAKY,KACN,yBAAKL,UAAU,IACb,4BAAQM,QAAS,kBApBA,SAACZ,GAEpBK,EADsB,aAApBD,EACS,aAEA,YAEbH,EAAaD,GAcca,CAAeb,KAASI,GAC/C,4BAAQQ,QAAS,kBAAMV,EAAWF,IAAQO,MAAO,CAAEO,MAAO,QAA1D,OAQR,SAASC,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHb,mBAAS,IADN,mBACtBc,EADsB,KACfC,EADe,KAU7B,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACGJ,IACLD,EAAQC,GACRC,EAAS,OAKP,2BACEI,KAAK,OACLhB,UAAU,OACVW,MAAOA,EACPM,YAAY,cACZC,SAAU,SAACJ,GAAD,OAAOF,EAASE,EAAEK,OAAOR,WA8D5BS,MAxDf,WAAgB,IAAD,EACWvB,mBAAS,CAC/B,CACEQ,KAAM,mBACNH,YAAY,GAEd,CACEG,KAAM,qBACNH,YAAY,GAEd,CACEG,KAAM,iBACNH,YAAY,KAZH,mBACRmB,EADQ,KACDC,EADC,KAqBP3B,EAAe,SAACD,GACpB,IAAM6B,EAAUF,EAAMG,KAAI,SAAC/B,EAAMgC,GAI/B,OAHI/B,IAAU+B,IACZhC,EAAKS,YAAcT,EAAKS,YAEnBT,KAGT6B,EAASC,IAGL3B,EAAa,SAACF,GAClB,IAAMgC,EAAQ,YAAOL,GACrBK,EAASC,OAAOjC,EAAO,GACvB4B,EAASI,IAGX,OACE,yBAAK1B,UAAU,OACb,yBAAKA,UAAU,aACZqB,EAAMG,KAAI,SAAC/B,EAAMC,GAAP,OACT,kBAACF,EAAD,CACEoC,IAAKlC,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,OAGhB,kBAACa,EAAD,CAAUC,QAlCA,SAACL,GACf,IAAMkB,EAAO,sBAAOF,GAAP,CAAc,CAAEhB,UAC7BiB,EAASC,SChEOM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1b802eed.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction Todo({ todo, index, completeTodo, deleteTodo }) {\n  const [completeBtnText, changeText] = useState(\"Complete\");\n\n  const handleComplete = (index) => {\n    if (completeBtnText === \"Complete\") {\n      changeText(\"Incomplete\");\n    } else {\n      changeText(\"Complete\");\n    }\n    completeTodo(index);\n  };\n\n  return (\n    <div\n      className=\"todo\"\n      style={\n        todo.isComplete\n          ? { textDecoration: \"line-through\", background: \"#888\" }\n          : { textDecoration: \"none\", background: \"#fff\" }\n      }\n    >\n      {todo.text}\n      <div className=\"\">\n        <button onClick={() => handleComplete(index)}>{completeBtnText}</button>\n        <button onClick={() => deleteTodo(index)} style={{ color: \"red\" }}>\n          x\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"text\"\n        value={value}\n        placeholder=\"add todo...\"\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\n\nfunction App() {\n  let [todos, setTodos] = useState([\n    {\n      text: \"Learnabout react\",\n      isComplete: false,\n    },\n    {\n      text: \"Party with friends\",\n      isComplete: false,\n    },\n    {\n      text: \"Build Todo app\",\n      isComplete: false,\n    },\n  ]);\n\n  const addTodo = (text) => {\n    const newTodo = [...todos, { text }];\n    setTodos(newTodo);\n  };\n\n  const completeTodo = (index) => {\n    const newTodo = todos.map((todo, i) => {\n      if (index === i) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n\n    setTodos(newTodo);\n  };\n\n  const deleteTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            deleteTodo={deleteTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}